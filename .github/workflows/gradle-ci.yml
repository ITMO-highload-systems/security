name: Gradle CI

# Запускаем workflow на каждый push или pull request в ветки main и dev
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Проверяем репозиторий
      - name: Checkout code
        uses: actions/checkout@v3

      # Устанавливаем Java
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: corretto  # Выберите вашу JDK (temurin — OpenJDK от Eclipse Foundation)

      # Устанавливаем Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
        with:
          version: 'latest'

      # Кэшируем зависимости Gradle для ускорения сборки
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Скачиваем Gradle Wrapper и выполняем сборку
      - name: Build
        run: ./gradlew clean build -x test

      - name: Test
        run: ./gradlew test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: build/libs

  save-docker-file:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:

      # Проверяем репозиторий
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: Package
          path: build/libs

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
